'use client';

import { useState, useEffect } from 'react';
import { QuestionType, Difficulty } from '@/models/Question';
import QuestionListItem from '@/components/QuestionListItem';
import QuestionForm from '@/components/QuestionForm';
import Modal from '@/components/Modal';
import { PlusIcon } from '@heroicons/react/24/outline';

interface Question {
  _id: string;
  title: string;
  type: QuestionType;
  content: string;
  options?: string[];
  answer: string;
  explanation?: string;
  difficulty: Difficulty;
  tags: string[];
  source?: string;
  createdAt: string;
  updatedAt: string;
}

export default function AdminPage() {
  const [questions, setQuestions] = useState<Question[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingQuestion, setEditingQuestion] = useState<Question | null>(null);

  // 筛选条件状态
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedType, setSelectedType] = useState('');
  const [selectedDifficulty, setSelectedDifficulty] = useState('');
  const [selectedTag, setSelectedTag] = useState('');

  useEffect(() => {
    fetchQuestions();
  }, []);

  const fetchQuestions = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/questions');
      if (!response.ok) {
        throw new Error('获取题目列表失败');
      }
      const data = await response.json();
      setQuestions(data.data.questions);
    } catch (err) {
      setError(err instanceof Error ? err.message : '未知错误');
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (id: string) => {
    const question = questions.find(q => q._id === id);
    if (question) {
      setEditingQuestion(question);
      setIsModalOpen(true);
    }
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm('确定要删除这道题目吗？')) {
      return;
    }

    try {
      const response = await fetch(`/api/questions/${id}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('删除题目失败');
      }

      // 重新获取题目列表
      fetchQuestions();
    } catch (err) {
      setError(err instanceof Error ? err.message : '删除失败');
    }
  };

  const handleView = (id: string) => {
    const question = questions.find(q => q._id === id);
    if (question) {
      setEditingQuestion(question);
      setIsModalOpen(true);
    }
  };

  const handleCreate = () => {
    setEditingQuestion(null);
    setIsModalOpen(true);
  };

  const handleSubmit = async (formData: Omit<Question, '_id' | 'createdAt' | 'updatedAt'>) => {
    try {
      const response = await fetch(
        editingQuestion ? `/api/questions/${editingQuestion._id}` : '/api/questions',
        {
          method: editingQuestion ? 'PATCH' : 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData),
        }
      );

      if (!response.ok) {
        throw new Error(editingQuestion ? '更新题目失败' : '创建题目失败');
      }

      // 重新获取题目列表
      fetchQuestions();
      setIsModalOpen(false);
    } catch (err) {
      setError(err instanceof Error ? err.message : '操作失败');
    }
  };

  // 筛选题目
  const filteredQuestions = questions.filter(question => {
    const matchesSearch = searchQuery
      ? question.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        question.content.toLowerCase().includes(searchQuery.toLowerCase())
      : true;

    const matchesType = selectedType ? question.type === selectedType : true;

    const matchesDifficulty = selectedDifficulty
      ? question.difficulty === selectedDifficulty
      : true;

    const matchesTag = selectedTag
      ? question.tags.some(tag =>
          tag.toLowerCase().includes(selectedTag.toLowerCase())
        )
      : true;

    return matchesSearch && matchesType && matchesDifficulty && matchesTag;
  });

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-center">加载中...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-center text-red-600">{error}</div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">题库管理</h1>
        <button
          onClick={handleCreate}
          className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          <PlusIcon className="h-5 w-5 mr-2" />
          新建题目
        </button>
      </div>
      
      {/* 搜索和筛选区域 */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              搜索
            </label>
            <input
              type="text"
              placeholder="搜索题目..."
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              题目类型
            </label>
            <select
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
              value={selectedType}
              onChange={(e) => setSelectedType(e.target.value)}
            >
              <option value="">全部</option>
              <option value={QuestionType.SINGLE_CHOICE}>单选题</option>
              <option value={QuestionType.MULTIPLE_CHOICE}>多选题</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              难度
            </label>
            <select
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
              value={selectedDifficulty}
              onChange={(e) => setSelectedDifficulty(e.target.value)}
            >
              <option value="">全部</option>
              <option value={Difficulty.EASY}>简单</option>
              <option value={Difficulty.MEDIUM}>中等</option>
              <option value={Difficulty.HARD}>困难</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              标签
            </label>
            <input
              type="text"
              placeholder="输入标签..."
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
              value={selectedTag}
              onChange={(e) => setSelectedTag(e.target.value)}
            />
          </div>
        </div>
      </div>

      {/* 题目列表 */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                标题
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                类型
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                难度
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                标签
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                操作
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredQuestions.map((question) => (
              <QuestionListItem
                key={question._id}
                question={question}
                onEdit={handleEdit}
                onDelete={handleDelete}
                onView={handleView}
              />
            ))}
          </tbody>
        </table>
      </div>

      {/* 编辑/创建题目模态框 */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={editingQuestion ? '编辑题目' : '新建题目'}
      >
        <QuestionForm
          initialData={editingQuestion || undefined}
          onSubmit={handleSubmit}
          onCancel={() => setIsModalOpen(false)}
        />
      </Modal>
    </div>
  );
} 